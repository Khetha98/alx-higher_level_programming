
===========================
Use of 0-add_integer.py
===========================

The module defines the integer addition function ``add_integer(a, b=98)``.

Usage
=====

The import of function from the module:
    >>> add_integer = __import__('0-add_integer').add_integer

Addition of two positive integers (a = 1 and b = 1)
    >>> add_integer(1, 1)
    2

Addition of one positive and one negative integer (a = 10 and b = -4)
    >>> add_integer(10, -4)
    6

Addition of two negative integers (a = -10 and b = -4)
    >>> add_integer(-10, -4)
    -14

Addition of two integers with the second being the same as the default value of b (a = 2 and b = 98)
    >>> add_integer(2)
    100

Addition of a positive float and a positive integer (a = 2.5 and b = 5)
    >>> add_integer(2.5, 5)
    7

Addition of a float and an integer where an integer is equal to the default value of b (a = 2.5 and b = 98)
    >>> add_integer(2.5)
    100

Addition of a positive float and a negative integer  (a = 10.5 and b = -2)
    >>> add_integer(10.5, -2)
    8

Addition of two negative floats (a = -10.5 and b = -2)
    >>> add_integer(-10.5, -2)
    -12

Addition of an integer number and string ( a = 4 and b = "school")
    >>> add_integer(4, "school")
    Traceback (most recent call last):
	      ...
    TypeError: b must be an integer

When no argument is passed
    >>> add_integer(None)
    Traceback (most recent call last):
	      ...
    TypeError: a must be an integer

Addition of a letter and a number (a = 'c' and b = 1)
    >>> add_integer('c', 1)
    Traceback (most recent call last):
              ...
    TypeError: a must be an integer

Addition of two letters
    >>> add_integer('c', 'm')
    Traceback (most recent call last):
              ...
    TypeError: a must be an integer


Addition of a tuple